% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rl-to-wf.r
\name{response_list_to_warc_file}
\alias{response_list_to_warc_file}
\title{Turns a list of \code{httr} \code{response} objects into a WARC file}
\usage{
response_list_to_warc_file(httr_response_list, path, gzip = TRUE,
  warc_date = Sys.time(), warc_record_id = NULL, warc_info = list(software
  = sprintf("jwatr \%s", packageVersion("jwatr")), format =
  "WARC File Format 1.0"))
}
\arguments{
\item{httr_response_list}{a list of \code{httr} \code{response} objects \emph{or} a list of
\code{safely}-wrapped \code{httr} \code{reponse} objects (i.e. \code{httr::GET} was wrapped
with \code{purrr::safely}).}

\item{path}{path (dir + base file name) to the created WARC file}

\item{gzip}{should the WARC file be gzip'd?}

\item{warc_date}{A supplied \code{POSIXct} timestamp to use to timestamp the WARC file.
Current time will be used if none supplied.}

\item{warc_record_id}{A unique identifier for the WARC record. If not provided one
will be generated with \code{UUIDgenerate}.}

\item{warc_info}{a named \code{list} of fields to go into the payload of the \code{warcinfo}
record that will be at the top of the WARC file}
}
\description{
You may not want to change your existing workflows to use the \code{httr} \code{GET}
and \code{POST} helpers. It it not uncommon to \code{lapply} or \code{purrr::map} a series
of \code{httr} verb cals into a list of \code{response} objects. Those that have been
bitten by the intermittent HTTP errors that cause scraping loops to fail
will also likely be using \code{purrr::safely} to wrap \code{httr} verb calls to ensure
the loop succeeds in capturing some information.
}
\details{
This function makes it easy to turn a list of these \code{response} objects (wrapped
or plain) into a WARC file. Sure, you can save an R \code{list} to an R data file,
but that won't be usable by folks outside the R ecosystem. Plus, there are scads of
tools that can work with WARC files, including those in large-scale data
processing environments.

List elements that are not plain or "safe" \code{response} objects will be gracefully
skipped over.
}
\examples{
\dontrun{
urls <- c("https://rud.is/", "https://rud.is/b/")

res_list <- lapply(urls, httr::GET)

tf <- tempfile()
response_list_to_warc_file(res_list, tf)
ulink(tf)
}
}
