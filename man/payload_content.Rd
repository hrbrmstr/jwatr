% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/payload-content.r
\name{payload_content}
\alias{payload_content}
\title{Helper function to convert WARC raw headers+payload into something useful}
\usage{
payload_content(url, ctype = NULL, headers, payload, as = NULL,
  type = NULL, encoding = NULL, ...)
}
\arguments{
\item{url, ctype, headers, payload}{\code{raw} content from the \code{target_uri},
\code{http_protocol_content_type}, \code{http_raw_headers} &
\code{payload} fields of a WARC data frame.}

\item{as}{desired type of output: \code{raw}, \code{text} or
\code{parsed}. \code{content} attempts to automatically figure out
which one is most appropriate, based on the content-type.}

\item{type}{MIME type (aka internet media type) used to override
the content type returned by the server. See
\url{http://en.wikipedia.org/wiki/Internet_media_type} for a list of
common types.}

\item{encoding}{For text, overrides the charset or the Latin1 (ISO-8859-1)
default, if you know that the server is returning the incorrect encoding
as the charset in the content-type. Use for text and parsed outputs.}

\item{...}{Other parameters parsed on to the parsing functions, if \code{as = "parsed"}.}
}
\description{
This works much the same way as the \code{content()} function in the \code{httr} package and
conforms to its API for the \code{as}, \code{type}, \code{encoding} and \code{...} fields.
}
\details{
Unlike its \code{httr} counterpart, \code{payload_content()} can handle gzip'd payload
contents (\code{httr} has it easy since \code{curl} decodes the gzip content automagically
for it). It does make a best-guess for expanded content size, so is not 100%
guaranteed to work for all gzip'd payload content.
}
